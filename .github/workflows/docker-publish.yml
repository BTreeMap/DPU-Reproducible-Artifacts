name: Docker

on:
  schedule:
    - cron: '22 14 * * *'
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit Docker container builder
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Find Dockerfiles and build images
      - name: Build and push Docker images
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          # Find all Dockerfiles recursively
          for dockerfile in $(find . -name 'Dockerfile'); do
            # Get directory of the Dockerfile
            dir=$(dirname "$dockerfile")
            # Construct image tag based on the directory structure
            image_name="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-$(basename "$dir")"
            echo "Building image for $image_name"
            # Build and push the Docker image
            docker buildx build --platform linux/arm64 "$dir" --file "$dockerfile" --tag "$image_name" --push
          done

      # Sign the published Docker images except on PRs.
      - name: Sign the published Docker images
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ steps.build-and-push.outputs.tags }} # Adjust as necessary based on your tagging strategy
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
