name: Build and Push Docker Images

on:
  schedule:
    - cron: '0 5 * * *'
    - cron: '0 17 * * *'
  push:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    # Run the job if triggered by a cron job or a push containing the specific commit message
    if: >
      github.event_name == 'schedule' ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, 'run-ci'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into ${{ env.REGISTRY }} Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Environment Variables
        run: |
          set -e
          # Convert REGISTRY and IMAGE_NAME to lowercase
          echo "Converting REGISTRY and IMAGE_NAME to lowercase"
          REGISTRY_LOWER=$(echo '${{ env.REGISTRY }}' | tr '[:upper:]' '[:lower:]')
          echo "REGISTRY_LOWER=$REGISTRY_LOWER" >> $GITHUB_ENV
          IMAGE_NAME_LOWER=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV

          # Get current date and time
          echo "Getting current date and time"
          DATE_TIME=$(date '+%Y-%m-%d.%H-%M-%S')
          echo "DATE_TIME=$DATE_TIME" >> $GITHUB_ENV
          DATE=$(date '+%Y-%m-%d')
          echo "DATE=$DATE" >> $GITHUB_ENV

          # Get full commit hash
          echo "Setting COMMIT_HASH to GITHUB_SHA"
          COMMIT_HASH='${{ github.sha }}'
          echo "COMMIT_HASH=$COMMIT_HASH" >> $GITHUB_ENV

          # Base image path
          echo "Constructing BASE_IMAGE"
          BASE_IMAGE="$REGISTRY_LOWER/$IMAGE_NAME_LOWER"
          echo "BASE_IMAGE=$BASE_IMAGE" >> $GITHUB_ENV

      - name: Find Dockerfiles
        id: find_dockerfiles
        run: |
          echo "Searching for Dockerfiles"
          DOCKERFILES=$(find . -name 'Dockerfile' | sort -r)
          if [ -z "$DOCKERFILES" ]; then
            echo "No Dockerfiles found."
            exit 1
          fi
          echo "Found Dockerfiles:"
          echo "$DOCKERFILES"
          # Write the Dockerfiles into a file to be read in the next step
          echo "$DOCKERFILES" > dockerfiles.txt

      - name: Generate Makefile
        run: |
          set -e
          echo "Reading Dockerfiles from file"
          IFS=$'\n' read -d '' -r -a dockerfiles < dockerfiles.txt

          if [ ${#dockerfiles[@]} -eq 0 ]; then
            echo "No Dockerfiles to process."
            exit 1
          fi

          echo "Generating Makefile for Docker builds"

          build_targets=()
          makefile_content=""

          for dockerfile in "${dockerfiles[@]}"; do
            # Get the directory of the Dockerfile
            dockerfile_dir=$(dirname "$dockerfile")
            image_variant=$(basename "$dockerfile_dir" | tr '[:upper:]' '[:lower:]')

            # Construct image tags
            tags=()
            tags+=("${BASE_IMAGE}:${image_variant}")
            tags+=("${BASE_IMAGE}:${image_variant}.latest")
            tags+=("${BASE_IMAGE}:${image_variant}.${DATE}")
            tags+=("${BASE_IMAGE}:${image_variant}.${DATE_TIME}")
            tags+=("${BASE_IMAGE}:${image_variant}.${COMMIT_HASH}")
            tags+=("${BASE_IMAGE}:${image_variant}.${COMMIT_HASH}.${DATE}")
            tags+=("${BASE_IMAGE}:${image_variant}.${COMMIT_HASH}.${DATE_TIME}")

            # Define target and builder names
            target_name="build_${image_variant}"
            builder_name="builder_${image_variant}"

            # Append to build targets
            build_targets+=("$target_name")

            # Build target content
            target_content="${target_name}:\n"
            target_content+="\t@echo \"Building image for ${tags[0]} with tags:\"\n"
            for tag in "${tags[@]}"; do
              target_content+="\t@echo \" - $tag\"\n"
            done

            # Create a new builder instance
            target_content+="\t@docker buildx create --use --name ${builder_name}\n"

            # Enable multi-platform builds
            target_content+="\t@docker run --privileged --rm tonistiigi/binfmt --install all\n"

            # Build the Docker image and tag it with all tags
            buildx_cmd="docker buildx build --builder ${builder_name} --push --no-cache --platform linux/amd64,linux/arm64"
            for tag in "${tags[@]}"; do
              buildx_cmd+=" --tag $tag"
            done
            buildx_cmd+=" \"$dockerfile_dir\" --file \"$dockerfile\""

            target_content+="\t@${buildx_cmd}\n"

            # Remove the builder instance
            target_content+="\t@docker buildx rm ${builder_name} || true\n\n"

            # Append to makefile content
            makefile_content+="$target_content"
          done

          # Write the 'all' target to the Makefile
          {
            echo "all: ${build_targets[@]}"
            echo ""
            printf "$makefile_content"
          } > Makefile

          # Output the Makefile for debugging
          echo "Generated Makefile:"
          cat Makefile

      - name: Build and Push Docker Images in Parallel
        run: |
          echo "Starting Docker builds in parallel"
          make -j $(nproc)
